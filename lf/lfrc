#  ██   ████
# ░██  ░██░
# ░██ ██████ ██████  █████
# ░██░░░██░ ░░██░░█ ██░░░██
# ░██  ░██   ░██ ░ ░██  ░░
# ░██  ░██   ░██   ░██   ██
# ███  ░██  ░███   ░░█████
#░░░   ░░   ░░░     ░░░░░

# To get image previews, you need these 4 steps:
# 1. Install ueberzug
# 2. The previewer file (~/.config/lf/previewer for me), must have a command
#    similar to mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub").

# Main options
set icons
set period 1
#set relativenumber
#set number
set hidden!
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/previewer'
set promptfmt "
\033[48;2;35;38;39;38;2;28;220;156m  
\033[38;2;35;38;39;48;2;202;31;31m
\033[38;2;202;31;31;48;2;40;47;62m
\033[38;2;255;255;255m %w 
\033[38;2;40;47;62;48;2;58;67;89m
\033[38;2;255;255;255m %f 
\033[;38;2;58;67;89;49m\033[m"

set incsearch
set incfilter
#set globsearch on
set ratios 2:3:4 # 2:3:7:7
set truncatechar "…"
set waitmsg "\033[1;31m⏎\033[m"
set timefmt "02/01/2006 15:04:05 "
set infotimefmtnew '02/01 15:04'
set infotimefmtold '02/01/06'
set errorfmt "\033[1;31m"
set numberfmt "\033[38;2;75;87;116m"
set dircounts
set tabstop 4
set scrolloff 5
set wrapscroll
set shellopts '-eu'
set ifs "\n"
set shell "zsh"
set ruler 'df:acc:progress:selection:filter:ind'
set cursorpreviewfmt "\033[7m"

source '~/.config/lf/opener'

%test $LF_LEVEL -eq 1 || >&2 printf "Warning: You're in a nested lf instance!"

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"
cmd trash %trash-put $fx


cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf -- "%s\n" $fx | sed 's|'"$HOME"'||'
	printf "\t\033[1;33m¿Remover? \033[37m[\033[32ms\033[37m/\033[31mN\033[37m]\033[m "
	read -r REPLY
	case "$REPLY" in
		[yYsS]) rm -rf -- $fx ;;
	esac
}}


cmd chmodx &{{
	chmod u+x $fx
	lf -remote "send $id reload"
}}


cmd shred ${{
	# TODO:
	# handle multiple files with shred or rshred
	# for files or directories respectively (with array/positional parameters)
	# Al parecer hay algunos bugs luego del primer despedazo no se puede despedazar más? revisar luego
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf -- "%s\n" $fx | sed 's|'"$HOME"'||'
	# Mejorar el prompteo, que sea más cuidadoso
	printf "\t\033[1;34m¿Despedazar? \033[37m[\033[32ms\033[37m/\033[31mN\033[37m]\033[m "
	read -r REPLY
	case "$REPLY" in
		[yYsS])
			for f in $fx; do
				if [ -f "$f" ]; then
					shred -u -n 3 "$f" >/dev/null 2>&1 &
					# TODO: Poner un máximo número de trabajos
				elif [ -d "$f" ]; then
					rshred -fdu "$f"
				fi
			done
		;;
	esac
}}


cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf -- "%s\n" $fx
	printf "\t\033[1;34m¿Extraer? \033[37m[\033[32ms\033[37m/\033[31mN\033[37m]\033[m "
	read -r REPLY
	case "$REPLY" in
		[yYsS]) aunpack $fx ;;
	esac
}}


cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear
	echo "¿A dónde mover?"
	if dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-"$HOME/.config"}/shell/bm-dirs" \
			| fzf \
			| sed 's|~|$HOME|'
		)"
	then
		for x in $fx; do
			eval mv -iv \"$x\" \"$dest\"
		done &&
			notify-send "lf" "🚚 Fichero(s) movidos a $dest"
	fi
}}


cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear
	echo "¿A dónde copiar?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-"$HOME/.config"}/shell/bm-dirs" \
		| fzf \
		| sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "lf" "📋 Fichero(s) copiados a $dest"
}}

cmd broot ${{
	# You need to manually close broot printing the
	# selected path with :print-path or :pp. You may
	# want to configure broot keybindings
	selected="$(broot)"
	if [ -d "$selected" ]; then
		lf -remote "send ${id} cd \"${selected}\""
	elif [ -e "$selected" ]; then
		lf -remote "send ${id} select \"${selected}\""
	else
		>&2 printf "Could not select %s\n" "${selected}"
	fi
}}

cmd paste_link %{{
	IFS='
'
	# TODO: reescribir no con los marcados a copiar/pegar,
	# sino con los seleccionados: $fs
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift
	if [ $# -lt 1 ]; then
		lf -remote "send $id echo no files to link"
		exit 1
	fi
	case "$mode" in
		# symbolically copy mode is indicating a soft link
		copy) ln -sr -t . -- "$@";;
		# while a move mode is indicating a hard link
		move) ln -t . -- "$@";;
	esac \
		|| exit $?
	rm ~/.local/share/lf/files
	lf -remote "send clear"
}}

cmd follow_link %{{
	lf -remote "send ${id} select \"$(readlink $f)\""
}}

cmd zlua %{{
	lf -remote "send ${id} cd \"$(z.lua -e $*)\""
}}

cmd zlua_i ${{
	dir=$(z.lua -l "$@" \
		| fzf --nth 2.. --tac +s -e \
			--header "Directorios frecientes" --header-first \
			--preview "lsd --color always --icon always --tree --depth 3 --group-dirs first {+2} 2>/dev/null" \
		| awk '{print substr($0, index($0,$2))}'
	)
	lf -remote "send ${id} cd \"${dir}\""
}}

cmd gsh %{{
	lf -remote "send ${id} cd \"$(g.sh -x $*)\""
}}

cmd gsh_fuzzy %{{
	lf -remote "send ${id} cd \"$(_GS_GREP='fzf -f' g.sh -l $* | awk 'NR==1{print $2}')\""
}}

cmd gsh_i ${{
	selected=$(g.sh -l "$@" \
		| fzf --nth 2.. --tac +s -e \
		--header "Directorios marcados" --header-first \
		--preview "lsd --color always --icon always --tree --depth 2 --group-dirs first {+2} 2>/dev/null" \
		| awk '{print substr($0, index($0,$2))}'
	)
	if [ -d "$selected" ]; then
		lf -remote "send ${id} cd \"${selected}\""
	elif [ -e "$selected" ]; then
		lf -remote "send ${id} select \"${selected}\""
	else
		>&2 printf "Could not select %s\n" "${selected}"
	fi
}}

cmd stop ${{
	kill -TSTP $(ps -p $$ -o 'ppid=')
}}

cmd setbg "$1"


map <tab> quit
map q
map w
map e
map r
map t
map y
map u
map o
map p
map a
map s
map d
map f
map g
map h
map j
map k
map l
map z delete
map x cut
map c copy
map v paste
map b 
map n rename
map m select

map <enter> open


